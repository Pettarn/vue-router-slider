{"version":3,"file":"VueRouterSlider.umd.js","sources":["../src/lib/SliderView.vue","../src/lib/index.js"],"sourcesContent":["<template>\n  <div class=\"slider-view\">\n    <component\n      :is=\"leftComp\"\n      @transitionend=\"transitionend\"\n      class=\"left-comp\"\n      :style=\"leftStyleObject\"\n    ></component>\n    <transition :name=\"direction\">\n      <router-view\n        class=\"self-comp\"\n        @touchstart.native=\"start\"\n        @touchmove.native=\"move\"\n        @touchend.native=\"end\"\n        @transitionend=\"transitionend\"\n      ></router-view>\n    </transition>\n    <component\n      :is=\"rightComp\"\n      @transitionend=\"transitionend\"\n      class=\"right-comp\"\n      :style=\"rightStyleObject\"\n    ></component>\n  </div>\n</template>\n\n<script>\nexport default {\n  mounted() {\n    this.name = this.value || this.routerNameList[0];\n    this.$router.push({ name: this.name });\n    this.viewportWidth = document.body.clientWidth;\n    let __this = this;\n    window.onresize = function() {\n      __this.viewportWidth = document.body.clientWidth;\n    };\n    // this.distanceToBorder = this.targetDom.getBoundingClientRect().left || null\n  },\n  props: {\n    routerNameList: {\n      type: Array,\n      required: true\n    },\n    routerPathList: {\n      type: Array,\n      required: true\n    },\n    compList: {\n      type: Array,\n      required: true\n    }\n  },\n  data() {\n    return {\n      direction: \"\",\n      currentIndex: null,\n      name: \"\",\n      targetDom: null,\n      leftDom: null,\n      rightDom: null,\n      leftIndex: null,\n      rightIndex: null,\n      leftComp: null,\n      rightComp: null,\n      touch: {\n        x1: null,\n        x2: null\n      },\n      totalDiff: 0,\n      viewportWidth: null,\n      leftStyleObject: {},\n      rightStyleObject: {},\n      leftDom: null,\n      rightDom: null,\n      flag: true,\n    };\n  },\n  watch: {\n    $route(to, from) {\n      this.name = to.name;\n      // if (this.flag === false) {\n      //   return;\n      // }\n      // if (this.leftDom) {\n      //   console.log(getComputedStyle(this.leftDom).transitionDuration);\n      // }\n      // console.log(this.flag);\n      // let toIndex = this.computedIndex(this.routerNameList, to.name);\n      // let fromIndex = this.computedIndex(this.routerNameList, from.name);\n      // if (toIndex > fromIndex) {\n      //   this.direction = \"left\";\n      // } else if (toIndex < fromIndex) {\n      //   this.direction = \"right\";\n      // } else {\n      //   this.direction = \"\";\n      // }\n    },\n    name() {\n      this.leftIndex =\n        (this.routerNameList.indexOf(this.name) -\n          1 +\n          this.routerNameList.length) %\n        this.routerNameList.length;\n      this.rightIndex =\n        (this.routerNameList.indexOf(this.name) +\n          1 +\n          this.routerNameList.length) %\n        this.routerNameList.length;\n      let __this = this;\n      this.leftComp = this.compList[__this.leftIndex];\n      this.rightComp = this.compList[__this.rightIndex];\n    },\n  },\n  methods: {\n    computedIndex(arr, item) {\n      return arr.indexOf(item);\n    },\n    start(e) {\n      this.flag = false;\n      this.targetDom = e.targetTouches[0].target;\n      this.distanceToBorder = this.targetDom.getBoundingClientRect().left\n      this.touch.x1 = e.targetTouches[0].clientX;\n      this.leftDom = document.querySelector(\".left-comp\");\n      this.rightDom = document.querySelector(\".right-comp\");\n      this.leftDom.style.transition = this.targetDom.style.transition = this.rightDom.style.transition =\n        \"\";\n      this.translate(this.targetDom, 0);\n    },\n    move(e) {\n      this.touch.x2 = e.targetTouches[0].clientX;\n      this.totalDiff = this.touch.x2 - this.touch.x1;\n      this.translate(this.targetDom, this.totalDiff);\n    },\n    end() {\n      let left = this.targetDom.getBoundingClientRect().left;\n      if (left > 0 && left < this.viewportWidth / 2) {\n        this.translate(this.targetDom, 0, left / this.viewportWidth);\n      } else if (left < 0 && -left < this.viewportWidth / 2) {\n        this.translate(this.targetDom, 0, -left / this.viewportWidth);\n      } else if (left > 0 && left > this.viewportWidth / 2) {\n        this.translate(\n          this.targetDom,\n          this.viewportWidth,\n          (this.viewportWidth - left) / this.viewportWidth\n        );\n        let __this = this;\n        this.$router.push({ name: this.routerNameList[__this.leftIndex] });\n      } else if (left < 0 && -left > this.viewportWidth / 2) {\n        this.translate(\n          this.targetDom,\n          -this.viewportWidth,\n          (this.viewportWidth + left) / this.viewportWidth\n        );\n        let __this = this;\n        this.$router.push({ name: this.routerNameList[__this.rightIndex] });\n      }\n    },\n    transitionend() {\n      console.log(\"bug\");\n      this.flag = true;\n      this.targetDom.style.transition = \"\";\n      this.leftDom.style.transition = this.rightDom.style.transition = \"\";\n    },\n    translate(elem, diff, transitionDuration, callback) {\n      if (transitionDuration) {\n        let __this = this;\n        // setTimeout(() => {\n        //   console.log(this)\n        //   this.flag = true;\n        //   this.leftDom.style.transition = this.rightDom.style.transition = elem.style.transition =\n        //     \"\";\n        // }, transitionDuration * 1000);\n        this.leftDom.style.transitionDuration = this.rightDom.style.transitionDuration = elem.style.transitionDuration =\n          transitionDuration + \"s\";\n        this.leftDom.style.transitionProperty = this.rightDom.style.transitionProperty = elem.style.transitionProperty =\n          \"left\";\n        this.leftDom.style.transitionTimingFunction = this.rightDom.style.transitionTimingFunction = elem.style.transitionTimingFunction =\n          \"ease\";\n      }\n      this.leftDom.style.left = diff - this.viewportWidth + \"px\";\n      elem.style.left = diff + \"px\";\n      this.rightDom.style.left = diff + this.viewportWidth + \"px\";\n    }\n  }\n};\n</script>\n\n\n<style scoped>\n.left-enter-active,\n.left-leave-active,\n.right-enter-active,\n.right-leave-active {\n  position: absolute;\n  transition: 1s all ease;\n}\n\n.left-enter,\n.right-leave-to {\n  transform: translateX(100%);\n}\n\n.right-enter,\n.left-leave-to {\n  transform: translateX(-100%);\n}\n\n.slider-view {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  overflow: hidden;\n}\n\n.left-comp,\n.right-comp {\n  position: absolute;\n}\n\n.self-comp {\n  position: absolute;\n  z-index: 1;\n}\n</style>\n","import SliderView from './SliderView.vue'\n\nSliderView.install = function (Vue) {\n  Vue.component('slider-view', SliderView)\n}\n\nexport default SliderView\n"],"names":["SliderView","install","Vue","component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAzBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAAA,mBAAU,CAACC,OAAX,GAAqB,UAAUC,GAAV,EAAe;EAClCA,EAAAA,GAAG,CAACC,SAAJ,CAAc,aAAd,EAA6BH,iBAA7B;EACD,CAFD;;;;;;;;"}